import java.util.concurrent.TimeUnit

apply plugin: 'java'
apply plugin: 'groovy'

test.dependsOn 'cleanTest'

repositories {
    mavenCentral()
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.codehaus.groovy:groovy-all:2.5.4'
    compile 'com.google.inject:guice:4.2.2'
    testCompile 'org.testng:testng:6.14.+'
    testCompile 'io.cucumber:cucumber-java:4.2.0'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'org.uncommons:reportng:1.1.4'
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

//Example customization of MANIFEST.MF
version = '0.1'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Example', 'Implementation-Version':version
    }
}

//Setup the test task
test {
    useTestNG() {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        excludeGroups << excludedGroups
        includeGroups << includedGroups
    }

    reports.html.enabled = false

    //Interceptors
    beforeTest { desc ->
       println "\n*** Starting execution of test ${desc.className}.${desc.name} ***"
    }
    afterTest { descriptor, result ->
        println "<<< Test ${descriptor.name} resulted in ${result.resultType} and took "+getElaspedTime(result.endTime - result.startTime)+" >>>\n"
    }

    //Modify the test logging
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }

    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

def getElaspedTime(def time) {
    if(time / 1000 < 1)
    {
        return String.format("0 min, %.3f sec", time/1000)
    }
    else
    {
        return String.format("%d min, %d sec",
                TimeUnit.MILLISECONDS.toMinutes(time),
                TimeUnit.MILLISECONDS.toSeconds(time) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time))

        )
    }
}